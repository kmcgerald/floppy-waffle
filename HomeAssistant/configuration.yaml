homeassistant:
  # Name of the location where Home Assistant is running
  name: Home
  # Location required to calculate the time the sun rises and sets
  latitude: !secret geo_latitude
  longitude: !secret geo_longitude
  # Impacts weather/sunrise data (altitude above sea level in meters)
  elevation: 115
  # metric for Metric, imperial for Imperial
  unit_system: imperial
  # Pick yours from here: http://en.wikipedia.org/wiki/List_of_tz_database_time_zones
  time_zone: America/New_York
  customize: 
  # Temperatures
    sensor.basement_temperature:
      icon: mdi:temperature-fahrenheit
    sensor.basement_temperature_2:
      friendly_name: "Basement Temp (ecobee)"
      icon: mdi:temperature-fahrenheit
    sensor.connor_temperature:
      friendly_name: "Connor's Room"
      icon: mdi:temperature-fahrenheit
    sensor.kaitlyn_temperature:
      friendly_name: "Kaitlyn's Room"
      icon: mdi:temperature-fahrenheit
    sensor.mbr_temperature:
      icon: mdi:temperature-fahrenheit
    sensor.master_bedroom_temperature:
      friendly_name: "MBR Temp (ecobee)"
      icon: mdi:temperature-fahrenheit
    sensor.garage_temperature:
      icon: mdi:temperature-fahrenheit
    sensor.home_temperature:
      icon: mdi:temperature-fahrenheit
    sensor.tv_room_temperature:
      icon: mdi:temperature-fahrenheit
  # Humidity
    sensor.basement_humidity:
      icon: mdi:water-percent
    sensor.mbr_humidity:
      icon: mdi:water-percent
    sensor.garage_humidity:
      icon: mdi:water-percent
    sensor.home_humidity:
      icon: mdi:water-percent
  # Doors
    sensor.garage_door:
      sensor_class: opening
  # Batteries
    sensor.keiths_phone:
      icon: mdi:battery
    sensor.keiths_E8_tablet:
      icon: mdi:battery
    sensor.jenns_E8_tablet:
      icon: mdi:battery
  # Occupancy
    binary_sensor.basement_occupancy:
      sensor_class: occupancy
    binary_sensor.connor_occupancy:
      sensor_class: occupancy
    binary_sensor.home_occupancy:
      sensor_class: occupancy
    binary_sensor.kailtyn_occupancy:
      sensor_class: occupancy
    binary_sensor.master_bedroom_occupancy:
      sensor_class: occupancy
    binary_sensor.tv_room_occupancy:
      sensor_class: occupancy
  # Switches
    switch.basement_stairs:
      friendly_name: "Basement Stairs Light"
      icon: mdi:lightbulb
    switch.tv_room:
      friendly_name: "TV Room Lamp"
      icon: mdi:lightbulb
    switch.fauxmo_switch:
      friendly_name: "Fauxmo Relay"
    sensor.pihole:
      friendly_name: "Pi-Holed Ads"
      icon: mdi:block-helper
  # Sensor Device Tracker
    device_tracker.esp8266_alarm:
      icon: mdi:radar
    device_tracker.esp8266_basement:
      icon: mdi:radar
    device_tracker.esp8266_garage:
      icon: mdi:radar
    device_tracker.esp8266_mbr_weather:
      icon: mdi:radar

# Show links to resources in log and frontend
#introduction:

# Enable the config tool
config:

# Enables the frontend
frontend:
  themes: !include_dir_merge_named themes/

http:
  # Uncomment this to add a password (recommended!)
  # api_password: PASSWORD

# Checks for available updates
updater:

# Discover some devices automatically
discovery:

# Display a Map of device locations
map:

wemo:
  static:
    - 10.0.0.44
    - 10.0.0.45
    - 10.0.0.46
    - 10.0.0.47
    - 10.0.0.48
    - 10.0.0.201

# Allows you to issue voice commands from the frontend in enabled browsers
conversation:

# Enables support for tracking state changes over time.
history:
  exclude:
    domains:
      - camera
    entities:
      - group.alerts
      - group.automations_view
      - group.basement
      - group.bedroom
      - group.cameras
      - group.darksky
      - group.default_view
      - group.devices
      - group.doors
      - group.ecobee
      - group.garage
      - group.humidities
      - group.iss
      - group.jenns_devices
      - group.keiths_devices
      - group.occupancy
      - group.occupancy_matrix
      - group.octoprint
      - group.outside
      - group.sun
      - group.temperatures
      - group.tvroom
      - group.weather

# View all events in a logbook
logbook:

# Track the sun
sun:

# ecobee thermostat
ecobee:
  api_key: !secret ecobee_key 

# TVs and media players
media_player:
  - platform: samsungtv
    host: 10.0.0.23
    name: "TV Room LED TV"
  - platform: samsungtv
    host: 10.0.0.24
    name: "Bedroom Plasma TV"
  - platform: samsungtv
    host: 10.0.0.25
    name: "Basement LED TV"
    port: 8001
    mac: !secret basement_tv_mac
#  - platform: ps4
#    host: 10.0.0.9
#    cmd: 'sudo ps4-waker'
  - platform: plex
    entity_namespace: 'plex'
    include_non_clients: true
    scan_interval: 5
    show_all_controls: false
    use_custom_entity_ids: true
    use_episode_art: true

# Control HDMI devices in TV-Room
#hdmi_cec:
#  devices:
#    1: Tivo
#    2: Soundbar
#    3: PS3
#    4: RasPi
    
input_select:
  tv_input:
    name: TV
    options:
     - 'OFF'
     - 'ON'
     - Tivo
     - PS3
    initial: 'OFF'

octoprint:
  host: 10.0.0.10 
  api_key: !secret octoprint_key

binary_sensor:
  - platform: octoprint
    monitored_conditions:
      - Printing
      - Printing Error
  - platform: iss
    # uncomment to show on map with devices
    #show_on_map: True

mqtt:
  broker: 192.168.1.175 
  port: 1883
  client_id: home-assistant-1
  keepalive: 60
  username: !secret mqtt_user
  password: !secret mqtt_passwd

notify:
  - name: "Simplepush Keith"
    platform: simplepush
    device_key: !secret simplepush_key
  - name: "Speak to Keith"
    platform: lannouncer
    host: 10.0.0.6
  - name: "Speak to Keith VPN"
    platform: lannouncer
    host: 10.8.0.6

device_tracker:
  - platform: owntracks
    max_gps_accuracy: 200
    waypoints: True
    waypoint_whitelist:
      - Keith 
  - platform: ping
    hosts: 
      chucks_phone: 192.168.1.3
      whitestar: 192.168.1.233  # Chuck's laptop
      lindas_phone: 192.168.1.237
      jenns_phone: 10.0.0.7
  - platform: nmap_tracker
    hosts:
      - 10.0.0.1/24
    exclude:
      - 10.0.0.152

# Sensors
sensor: !include sensors.yaml

group: !include groups.yaml

zone: !include zones.yaml

camera: !include cameras.yaml

automation: !include automations.yaml

alert: !include alerts.yaml

timer: !include timers.yaml

snips: 
  feedback_sounds: true

intent_script:
  lightsTurnOnSet:
  # house_room, unit, number
    speech:
      text: Ok I have turned on the light in the {{ house_room }}
    action:
      - service: light.turn_on
        data_template: 
          entity_id: light.{{ house_room | replace(" ","_") }}
          brightness_pct: "{{ number | default('100') | int }}"
          transition: 2
      - service: homeassistant.turn_on
        data_template:
          entity_id: switch.{{ house_room | replace(" ","_") }}

  lightsTurnOff:
  # house_room
    speech:
      text: Ok I have turned off the light in the {{ house_room }}
    action:
      - service: homeassistant.turn_off
        data_template:
          entity_id: light.{{ house_room | replace(" ","_") }}
          transition: 2
      - service: homeassistant.turn_off
        data_template:
          entity_id: switch.{{ house_room | replace(" ","_") }}

  lightsTurnUp:
  # house_room
    speech: 
      text: I have turned up the light in the {{ house_room }}
    action: 
      service: light.turn_on
      data_template: 
        entity_id: light.{{ house_room | replace(" ","_") }}
        brightness_pct: '{{ state_attr("light." + house_room | replace(" ","_"), "brightness_pct") + 10 }}'
        transition: 2

  #lightsTurnDown:
  # house_room

  turnOnMediaPlayer:
  # device, house_room
    speech:
      text: >
        {% if device is defined %} 
          OK I have turned on the {{ device }}
        {% elif house_room is defined %}
          OK I have turned on the tv in the {{ house_room }}
        {% else %}
          I don't know which one you want me to turn on.
        {% endif %}
    action: 
      service: media_player.turn_on 
      data_template:
        entity_id: >
          {% if device is defined %}
             media_player.{{ device | replace(" ","_") }}
          {% endif %}
          
  turnMediaPlayerOff:
  # device, house_room
    speech: 
      text: >
        {% if device is defined %}
          OK I have turned off the {{ device }}
        {% elif house_room is defined %}
          OK I have turned off the tv in the {{ house_room }}
        {% else %}
          I don't know which one you want me to turn off.
        {% endif %}
    action:
      service: media_player.turn_off
      data_template:
        entity_id: >
          {% if device is defined %}
            media_player.{{ device | replace(" ","_") }}
          {% elif house_room is defined %}
            {%- for state in states.media_player if house_room.lower() in state.name.lower() %}
               media_player.{{ state.name | replace(" ","_") }}
            {%- endfor -%}
          {% endif %}

  volumeUp:
  # device, house_room
    speech:
      text: >
        {% if device is defined %}
          OK I have raised the volume for the {{ device }}
        {% elif house_room is defined %}  
          OK I have raised the volume for the tv in the {{ house_room }}
        {% else %}
          I don't know which one you want me to raise the volume for.
        {% endif %}
    action:  
      service: media_player.volume_up
      data_template:
        entity_id: >
          {% if device is defined %}
            media_player.{{ device | replace(" ","_") }}
          {% elif house_room is defined %}
            {%- for state in states.media_player if house_room.lower() in state.name.lower() %}
               media_player.{{ state.name | replace(" ","_") }}
            {%- endfor -%}
          {% endif %}

  volumeDown:
  # device, house_room
    speech:
      text: >
        {% if device is defined %}
          OK I have lowered the volume for the {{ device }}
        {% elif house_room is defined %}  
          OK I have lowered the volume for the tv in the {{ house_room }}
        {% else %}
          I don't know which one you want me to lower the volume for.
        {% endif %}
    action:  
      service: media_player.volume_down
      data_template:
        entity_id: >
          {% if device is defined %}
            media_player.{{ device | replace(" ","_") }}
          {% elif house_room is defined %}
            {%- for state in states.media_player if house_room.lower() in state.name.lower() %}
               media_player.{{ state.name | replace(" ","_") }}
            {%- endfor -%}
          {% endif %}

  mute:
  # device, house_room
    speech: 
      text: >
        {% if device is defined %}
          OK I have muted the {{ device }}
        {% elif house_room is defined %}
          OK I have muted the tv in the {{ house_room }}
        {% else %}
          I don't know which one you want me to mute.
        {% endif %}
    action:
      service: media_player.volume_mute
      data_template:
        entity_id: >
          {% if device is defined %}
            media_player.{{ device | replace(" ","_") }}
          {% elif house_room is defined %}
            {%- for state in states.media_player if house_room.lower() in state.name.lower() %}
               media_player.{{ state.name | replace(" ","_") }}
            {%- endfor -%}
          {% endif %}
        is_volume_muted: true
  
  #LocationQuery:
  #  # aLocation, searchSubject
  #  speech:
  #    text: >
  #      {%- for state in states.device_tracker if state.name.lower() == searchSubject.lower() -%}
  #          {{ state.name }} is at {{ state.state }}  
  #      {%- else -%}
  #          Sorry, I don't have any trackers registered 
  #      {%- endfor -%}

  LocationQuery:
    # aLocation, searchSubject
    speech:
      text: >
        {%- for state in states.device_tracker if state.name.lower() == searchSubject.lower() -%}
          {% if state.state.lower() == aLocation.lower() %}
            Yes {{ state.name }} is at {{ state.state }}  
          {%- else -%}
            No {{ state.name }} is at {{ state.state }}
          {% endif %}
        {%- else -%}
            Sorry, I don't have any trackers registered 
        {%- endfor -%}

  checkStatus:
    # Object, Attribute(temperature, humidity) speech:
    speech:
      text: >
        {% if " tv" in Object.lower() %}
          {% for state in states.media_player if state.name.lower() == Object.lower() %}
            The {{ state.name }} is {{ state.state }} 
          {% endfor %}
        {% else %} 
          {%- for state in states.sensor if Object.lower() in state.name.lower() -%}
            "The {{ state.name }} is {{ state.state }}. " 
          {%- endfor -%}
          {%- for state in states.binary_sensor if Object.lower() in state.name.lower() -%}
            "The {{ state.name }} is {{ state.state }}. "
          {%- endfor -%}
          {%- for state in states.switch if Object.lower() in state.name.lower() -%}
            "The {{ state.name }} is {{ state.state }}. "
          {%- endfor -%}
          {%- for state in states.light if Object.lower() in state.name.lower() -%}
            "The {{ state.name }} is {{ state.state }}. "
          {%- endfor -%}
          {% for state in states.media_player if Object.lower() in state.name.lower() -%}
            The {{ state.name }} is {{ state.state }} 
          {% endfor %}
        {% endif %}

  searchWeatherForecast:
    speech:
      type: plain
      text: >
        The weather is currently
        {{ states('sensor.dark_sky_temperature') | round(0) }}
        degrees outside and {{ states('sensor.dark_sky_summary') }}.
        The high today will be
        {{ states('sensor.dark_sky_daily_high_temperature') | round(0)}}
        and {{ states('sensor.dark_sky_hourly_summary') }}

  searchWeatherForecastCondition:
  # forecast_condition_name
    speech:
      type: plain
      text: >
        {% if "sun" in forecast_condition_name.lower() %}
            Checking for sun.
          {% if "sun" in (states.sensor.dark_sky_summary | lower()) %}
            It is currently sunny.
          {% else %}
            No it is not sunny. it is {{ states('sensor.dark_sky_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_minutely_summary | lower()) %}  
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% endif %}
        {% if "cloud" in forecast_condition_name.lower() %}
            Checking for clouds.
          {% if "cloud" in (states.sensor.dark_sky_summary | lower()) %}
            It is currently {{ states('sensor.dark_sky_summary') }}.
            The cloud cover is {{ states('sensor.dark_sky_humidity') | round(0) }} percent
          {% else %}
            No it is not cloudy. It is {{ states('sensor.dark_sky_summary') }}
            The cloud cover is {{ states('sensor.dark_sky_humidity') | round(0) }} percent
          {% endif %}
          {% if "cloud" in (states.sensor.dark_sky_minutely_summary | lower()) %}
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "cloud" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "cloud" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% endif %}
        {% if "humid" in forecast_condition_name.lower() %}
            Checking for humid.
          {% if "humid" in (states.sensor.dark_sky_summary | lower()) %}
            It is currently {{ states('sensor.dark_sky_summary') }}. 
            The humidity level is {{ states('sensor.dark_sky_humidity') | round(0) }} percent
          {% else %}
            No it is not humid. It is {{ states('sensor.dark_sky_summary') }}
            The humidity level is {{ states('sensor.dark_sky_humidity') | round(0) }} percent
          {% endif %}
          {% if "humid" in (states.sensor.dark_sky_minutely_summary | lower()) %}
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "humid" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "humid" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% endif %}
        {% if "rain" in forecast_condition_name.lower() %}
            Checking for rain.
          {% if "rain" in (states.sensor.dark_sky_summary | lower()) %}
            It is currently raining.
          {% else %}
            No it is not raining. it is {{ states('sensor.dark_sky_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_minutely_summary | lower()) %}
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% endif %}
        {% if "snow" in forecast_condition_name.lower() %}
            Checking for snow.
          {% if "snow" in (states.sensor.dark_sky_summary | lower()) %}
            It is currently snowing.
          {% else %}  
            No it is not snowing. it is {{ states('sensor.dark_sky_summary') }}
          {% endif %}
          {% if "snow" in (states.sensor.dark_sky_minutely_summary | lower()) %}
           It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "snow" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "snow" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% endif %}
  searchWeatherForecastItem:
  # forecast_item, forecast_start_datetime, forecast_locality, forecast_region,
  # items in dictionary: umbrella, hat, coat, raincoat, sunglasses, sunhat, 
    speech:
      type: plain
      text: >
        {% if forecast_item.lower() in ['umbrella', 'raincoat'] %}
          {% if "rain" in (states.sensor.dark_sky_summary | lower()) %}
            Yes because it is currently raining.
          {% else %}
            No it is not raining. It is {{ states('sensor.dark_sky_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_minutely_summary | lower()) %}
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "rain" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% elif forecast_item.lower() in ['sunglasses', 'parasol', 'sunscreen'] %}
          {% if "sun" in (states.sensor.dark_sky_summary | lower()) %}
            Yes it is currently sunny.
          {% else %}
            No it is not sunny. It is {{ states('sensor.dark_sky_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_minutely_summary | lower()) %}
            It will be {{ states('sensor.dark_sky_minutely_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_hourly_summary | lower()) %}
            {{ states('sensor.dark_sky_hourly_summary') }}
          {% endif %}
          {% if "sun" in (states.sensor.dark_sky_daily_summary | lower()) %}
            {{ states('sensor.dark_sky_daily_summary') }}
          {% endif %}
        {% else %}
          The weather is currently
          {{ states('sensor.dark_sky_temperature') | round(0) }}
          degrees outside and {{ states('sensor.dark_sky_summary') }}.
          The high today will be
          {{ states('sensor.dark_sky_daily_high_temperature') | round(0) }}
          and {{ states('sensor.dark_sky_hourly_summary') }}
        {% endif %}

  searchWeatherForecastTemperature:
  # forecast_temperature_name, forecast_locality, forecast_region, forecast_start_datetime
    speech:
      type: plain
      text: >
        The temperature is currently
        {{ states('sensor.dark_sky_temperature') | round(0) }}
        degrees outside and {{ states('sensor.dark_sky_summary') }}.
        It feels like {{ states('sensor.dark_sky_apparent_temperature') | round(0) }}.
        The high today is
        {{ states('sensor.dark_sky_daily_high_temperature') | round(0)}}
        and will feel like {{ states('sensor.dark_sky_daily_high_apparent_temperature') | round(0) }}.
        The low today is 
        {{ states('sensor.dark_sky_daily_low_temperature') | round(0) }}
        and will feel like {{ states('sensor.dark_sky_daily_low_apparent_temperature') | round(0) }}. 

  SetTimer:
    speech:
      type: plain
      text: I have started the timer.
    action:
      service: script.set_timer
      data_template:
        name: "{{ timer_name }}"
        duration: "{{ timer_duration }}"
        seconds: "{{ timer_duration.seconds }}"
        minutes: "{{ timer_duration.minutes }}"
        hours: "{{ timer_duration.hours }}"
